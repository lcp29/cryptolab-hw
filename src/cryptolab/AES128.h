//
// Created by helmholtz on 2022/9/26.
//

#ifndef CRYPTOLAB_AES128_H
#define CRYPTOLAB_AES128_H

#include "GaloisField2.h"
#include "GaloisField2DenseMatrix.h"
#include "GaloisField2Vector.h"
#include "ByteBuffer.h"
#include <random>
#include <ctime>

namespace cryptolab
{
    class AES128
    {
    private:
        using keyW = GaloisField2Vector<8, unsigned char, 4>;
        /**
         * 子密钥，其中subKey[0]为初始密钥
         */
        aes128key subKeys[11];
        /**
         * ISO10126使用的随机数生成器
         */
        std::default_random_engine rng;
        /**
         * 初始向量
         */
        gf2m44 initVec;
        /**
         * 轮常量值
         */
        const static inline keyW rCon[10] =
                {{0x01, 0, 0, 0},
                 {0x02, 0, 0, 0},
                 {0x04, 0, 0, 0},
                 {0x08, 0, 0, 0},
                 {0x10, 0, 0, 0},
                 {0x20, 0, 0, 0},
                 {0x40, 0, 0, 0},
                 {0x80, 0, 0, 0},
                 {0x1b, 0, 0, 0},
                 {0x36, 0, 0, 0}};

        const static inline gf28 sBox[16][16] =
                {0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
                 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
                 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
                 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
                 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
                 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
                 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
                 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
                 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
                 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
                 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
                 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
                 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
                 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
                 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
                 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
                };

        const static inline gf28 invSBox[16][16] =
                {0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
                 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
                 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
                 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
                 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
                 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
                 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
                 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
                 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
                 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
                 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
                 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
                 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
                 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
                 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
                 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
                };

        const static inline gf2m44 colM = {2, 3, 1, 1,
                                           1, 2, 3, 1,
                                           1, 1, 2, 3,
                                           3, 1, 1, 2};
        const static inline gf2m44 invColM = {0xe, 0xb, 0xd, 0x9,
                                              0x9, 0xe, 0xb, 0xd,
                                              0xd, 0x9, 0xe, 0xb,
                                              0xb, 0xd, 0x9, 0xe};

        /**
         * 计算轮密钥
         */
        void keyExpand();

        /**
         * 进行一轮加密
         * @param d 加密前的数据
         * @param j 轮数，0<=j<=10
         * @return 加密后的数据
         */
        gf2m44 encRound(const gf2m44 &d, int j);

        /**
         * 进行一轮解密
         * @param d 解密前的数据
         * @param j 轮数，10<=j<=0
         * @return 解密后的数据
         */
        gf2m44 decRound(const gf2m44 &d, int j);

        /**
         * 使用S盒s进行代换
         * @param s 使用的S盒
         * @param b 要进行代换的GL(2^n)矩阵
         * @return 代换后的矩阵
         */
        template<int M, int N>
        GaloisField2DenseMatrix<8, unsigned char, M, N>
        substitution(const gf28 s[][16], const GaloisField2DenseMatrix<8, unsigned char, M, N> &b);

    public:
        enum class PaddingType
        {
            NOPADDING,
            ZEROS,
            ISO10126,
            PKCS5
        };

        enum class WorkingMode
        {
            ECB,
            CBC
        };

        AES128() = default;

        /**
         * 设置初始密钥K
         * @param b 初始密钥的列优先矩阵
         */
        void setInitKey(const aes128key &b);

        /**
         * 设置初始密钥K
         * @param b 初始密钥的数组{K_1, K_2, ..., K_16}
         */
        void setInitKey(const gf28 *b);

        /**
         * 设置初始密钥K
         * @param b 初始密钥的字符串
         */
        void setInitKey(const char *b);

        /**
         * 设置初始向量IV（CBC模式）
         * @param b 初始向量
         */
        void setInitVec(const gf2m44 &b);

        /**
         * 设置初始向量IV（CBC模式），列优先
         * @param b 初始向量的数组
         */
        void setInitVec(const gf28 *b);

        /**
         * 设置初始向量IV（CBC模式），列优先
         * @param b 初始向量的字符串
         */
        void setInitVec(const char *b);

        /**
         * 加密明文b，不带填充
         * @param b 待加密数据的缓冲区
         * @return 加密后数据的缓冲区
         */
        ByteBuffer encryptNoPadding(const ByteBuffer &b, WorkingMode mode);

        /**
         * 解密密文b，不带填充
         * @param b 待解密数据的缓冲区
         * @return 解密后数据的缓冲区
         */
        ByteBuffer decryptNoPadding(const ByteBuffer &b, WorkingMode mode);

        /**
        * 加密明文b
        * @param b 待加密数据的缓冲区
        * @return 加密后数据的缓冲区
        */
        ByteBuffer encrypt(const ByteBuffer &b, PaddingType p, WorkingMode mode = WorkingMode::ECB);

        /**
         * 解密密文b
         * @param b 待解密数据的缓冲区
         * @return 解密后数据的缓冲区
         */
        ByteBuffer decrypt(const ByteBuffer &b, PaddingType p, WorkingMode mode = WorkingMode::ECB);

        /**
         * 获取密钥扩展过程中的W[idx]
         * @param idx W的编号
         * @return W[idx]
         */
        keyW getW(int idx);

    };

} // cryptolab

#endif //CRYPTOLAB_AES128_H
